name: Terraform CI/CD Pipeline

on:
  push:
    branches:
      - main  # 🔹 `main` 브랜치로 머지되면 Terraform Apply 실행

env:
    TF_VAR_db_password: ${{ secrets.DB_PASSWORD}}
    
jobs:
  terraform:
    name: Terraform Deployment
    runs-on: ubuntu-latest  # 🔹 GitHub Actions 실행 환경 (Ubuntu)

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3  # 🔹 코드 체크아웃

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6  # 🔹 Terraform 버전 지정

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}  # 🔹 AWS 리전 설정

      - name: Terraform Init
        run: terraform init
        env:
          TF_INPUT: false

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        env:
          TF_INPUT: false

      - name: Debug GitHub Ref
        run: 'echo "Current ref: ${{ github.ref }} | Event: ${{ github.event_name }}"'

      - name: Terraform Apply (only on main branch)
        if: github.ref == 'refs/heads/main'  # 🔹 `main` 브랜치에서만 실행
        run: terraform apply -auto-approve tfplan
        env:
          TF_INPUT: false

      - name: Get ALB DNS from Terraform Output
        id: alb
        run: |
            ALB_DNS=$(terraform output -raw alb_dns_name)
            echo "alb_dns=$ALB_DNS" >> $GITHUB_OUTPUT
        
      - name: Get CloudFront Config
        id: cf_config
        run: |
            aws cloudfront get-distribution-config \
              --id ${{ secrets.CLOUDFRONT_DIST_ID }} \
              > config.json
            echo "etag=$(jq -r .ETag config.json)" >> $GITHUB_OUTPUT
        
      - name: Update CloudFront Origin (by domain match)
        run: |
            ALB_DNS=${{ steps.alb.outputs.alb_dns }}
            ETAG=${{ steps.cf_config.outputs.etag }}
        
            jq --arg alb "$ALB_DNS" '
              .DistributionConfig.Origins.Items |= map(
                if (.DomainName | test("elb\\.amazonaws\\.com$")) then
                  .DomainName = $alb
                else
                  .
                end
              )
            ' config.json > updated-config.json
        
            aws cloudfront update-distribution \
              --id ${{ secrets.CLOUDFRONT_DIST_ID }} \
              --if-match "$ETAG" \
              --distribution-config file://updated-config.json
        
      - name: Invalidate CloudFront Cache
        run: |
            aws cloudfront create-invalidation \
              --distribution-id ${{ secrets.CLOUDFRONT_DIST_ID }} \
              --paths "/*"
        
 