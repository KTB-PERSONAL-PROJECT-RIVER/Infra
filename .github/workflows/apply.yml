name: Terraform CI/CD Pipeline

on:
  push:
    branches:
      - main  # 🔹 `main` 브랜치로 머지되면 Terraform Apply 실행

env:
    TF_VAR_db_password: ${{ secrets.DB_PASSWORD}}
    AWS_REGION: ap-northeast-2
    
jobs:
  terraform:
    name: Terraform Deployment
    runs-on: ubuntu-latest  # 🔹 GitHub Actions 실행 환경 (Ubuntu)

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3  # 🔹 코드 체크아웃

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6  # 🔹 Terraform 버전 지정

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}  # 🔹 AWS 리전 설정

      - name: Terraform Init
        run: terraform init
        env:
          TF_INPUT: false

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        env:
          TF_INPUT: false

      - name: Debug GitHub Ref
        run: 'echo "Current ref: ${{ github.ref }} | Event: ${{ github.event_name }}"'

      - name: Terraform Apply (only on main branch)
        if: github.ref == 'refs/heads/main'  # 🔹 `main` 브랜치에서만 실행
        run: terraform apply -auto-approve tfplan
        env:
          TF_INPUT: false

      - name: Get ALB DNS safely from terraform output
        id: alb_dns
        run: |
          echo "Getting ALB DNS via terraform output"
          terraform output -json > tf-output.json
      
          if ! grep -q "alb_dns_name" tf-output.json; then
            echo "❌ alb_dns_name output not found"
            exit 1
          fi
      
          ALB_DNS=$(jq -r '.alb_dns_name.value' tf-output.json)
          echo "::notice::✅ Extracted ALB DNS: $ALB_DNS"
      
          # ✅ redirect ONLY to GITHUB_OUTPUT, no console output!
          {
            echo "alb_dns=$ALB_DNS"
          } >> "$GITHUB_OUTPUT"
        
      - name: Update CloudFront Origin (by domain match)
        run: |
          DIST_ID=${{ secrets.CLOUDFRONT_DIST_ID }}
          
          echo "Getting current CloudFront config..."
          aws cloudfront get-distribution-config --id $DIST_ID > full-config.json
      
          ETAG=$(jq -r .ETag full-config.json)
          jq '.DistributionConfig' full-config.json > config.json
      
          # 여기서 ALB_DNS는 이전 step에서 받은 output
          ALB_DNS=${{ steps.alb_dns.outputs.alb_dns }}
      
          echo "Patching origin to new ALB domain..."
          jq --arg alb "$ALB_DNS" '
            .Origins.Items |= map(
              if (.DomainName | test("elb\\.amazonaws\\.com$")) then
                .DomainName = $alb
              else
                .
              end
            )
          ' config.json > updated-config.json
      
          echo "Updating CloudFront distribution..."
          aws cloudfront update-distribution \
            --id $DIST_ID \
            --if-match "$ETAG" \
            --distribution-config file://updated-config.json
        
      - name: Invalidate CloudFront Cache
        run: |
            aws cloudfront create-invalidation \
              --distribution-id ${{ secrets.CLOUDFRONT_DIST_ID }} \
              --paths "/*"
        
      - name: Trigger Backend Deploy Workflow
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          repository: KTB-PERSONAL-PROJECT-RIVER/Backend
          event-type: terraform-complete
            
